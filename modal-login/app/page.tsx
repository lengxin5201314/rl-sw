"use client";
import {
  useAuthModal,
  useLogout,
  useSigner,
  useSignerStatus,
  useUser,
} from "@account-kit/react";
import { useEffect, useState } from "react";

export default function Home() {
  const user = useUser();
  const { openAuthModal } = useAuthModal();
  const signerStatus = useSignerStatus();
  const { logout } = useLogout();
  const signer = useSigner();

  const [createdApiKey, setCreatedApiKey] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [apiResponses, setApiResponses] = useState<{getKey?: any, setActivated?: any}>({});
  const [initializationTime, setInitializationTime] = useState(0);

  // 添加初始化计时器，如果初始化时间过长，提供重试选项
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (signerStatus.isInitializing) {
      const startTime = Date.now();
      timer = setInterval(() => {
        setInitializationTime(Math.floor((Date.now() - startTime) / 1000));
      }, 1000);
    }
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [signerStatus.isInitializing]);

  useEffect(() => {
    // User logged out, so reset the state.
    if (!user && createdApiKey) {
      setCreatedApiKey(false);
      setError(null);
      setApiResponses({});
    }
    // Waiting for user to be logged in.
    if (!user || !signer || !signerStatus.isConnected || createdApiKey) {
      return;
    }

    const submitStamp = async () => {
      setIsLoading(true);
      try {
        const whoamiStamp = await signer.inner.stampWhoami();
        console.log("Stamp created successfully:", whoamiStamp);
        
        const resp = await fetch("/api/get-api-key", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ whoamiStamp }),
        });
        
        if (!resp.ok) {
          const errorText = await resp.text();
          console.error("API response not OK:", resp.status, errorText);
          throw new Error(`API 请求失败: ${resp.status} ${errorText}`);
        }
        
        const data = await resp.json();
        setApiResponses(prev => ({...prev, getKey: data}));
        console.log("API key response:", data);
        return data as { publicKey: string };
      } catch (err) {
        console.error("submitStamp error:", err);
        throw err;
      }
    };

    const createApiKey = async (publicKey: string) => {
      try {
        console.log("Creating API key with public key:", publicKey);
        await signer.inner.experimental_createApiKey({
          // Name of the API key (important b/c the server is checks the prefix).
          name: `server-signer-${new Date().getTime()}`,
          // Public key generated by the server.
          publicKey,
          // Configure how long the API key is valid for.
          expirationSec: 60 * 60 * 24 * 62, // 62 days
        });
        console.log("API key created successfully");
      } catch (err) {
        console.error("createApiKey error:", err);
        throw err;
      }
    };

    const handleAll = async () => {
      try {
        // Submit whoami stamp & get new public key from server.
        const { publicKey } = await submitStamp();
        // Delegate user access to the API key.
        await createApiKey(publicKey);
        
        console.log("User orgId for activation:", user.orgId);
        
        // Mark API key as activated in db to flag to consumers that it's ready.
        const activateResp = await fetch("/api/set-api-key-activated", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ orgId: user.orgId, apiKey: publicKey }),
        });
        
        if (!activateResp.ok) {
          const errorText = await activateResp.text();
          console.error("Activate API response not OK:", activateResp.status, errorText);
          throw new Error(`激活 API 密钥失败: ${activateResp.status} ${errorText}`);
        }
        
        const activateData = await activateResp.json();
        setApiResponses(prev => ({...prev, setActivated: activateData}));
        console.log("API key activated:", activateData);
        
        // 验证激活状态
        const verifyResp = await fetch(`/api/get-api-key-status?orgId=${user.orgId}`);
        const verifyStatus = await verifyResp.text();
        console.log("Verification status:", verifyStatus);
        
        if (!verifyStatus.includes("activated")) {
          throw new Error("API 密钥激活验证失败，脚本可能无法继续");
        }
        
        setCreatedApiKey(true);
        setError(null);
      } catch (err) {
        console.error("handleAll error:", err);
        setError(err instanceof Error ? err.message : "创建或激活 API 密钥时出错");
      } finally {
        setIsLoading(false);
      }
    };

    handleAll();
  }, [createdApiKey, signer, signerStatus.isConnected, user]);

  // Show alert if crypto.subtle isn't available.
  useEffect(() => {
    if (typeof window === "undefined") {
      return;
    }
    try {
      if (typeof window.crypto.subtle !== "object") {
        throw new Error("window.crypto.subtle is not available");
      }
    } catch (err) {
      setError("Crypto API 在浏览器中不可用。请确保通过 localhost 或安全连接访问应用程序。");
      console.error("Crypto API error:", err);
    }
  }, []);

  // 显示调试信息的函数
  const renderDebugInfo = () => {
    if (!error && !isLoading && !signerStatus.isInitializing) return null;
    
    return (
      <div className="mt-4 p-4 bg-gray-100 rounded text-left max-w-lg">
        <h3 className="font-bold">调试信息:</h3>
        {error && <p className="text-red-500">{error}</p>}
        <p>用户状态: {user ? '已登录' : '未登录'}</p>
        <p>签名器状态: {JSON.stringify(signerStatus)}</p>
        <p>API 密钥创建: {createdApiKey ? '是' : '否'}</p>
        <p>加载中: {isLoading ? '是' : '否'}</p>
        {signerStatus.isInitializing && (
          <p>初始化时间: {initializationTime} 秒</p>
        )}
        {Object.keys(apiResponses).length > 0 && (
          <div>
            <p className="font-bold">API 响应:</p>
            <pre className="text-xs overflow-auto max-h-40">
              {JSON.stringify(apiResponses, null, 2)}
            </pre>
          </div>
        )}
      </div>
    );
  };

  // 重新加载页面的函数
  const handleReload = () => {
    window.location.reload();
  };

  return (
    <main className="flex min-h-screen flex-col items-center gap-4 justify-center text-center">
      {signerStatus.isInitializing ? (
        <div className="flex flex-col items-center">
          <p>初始化中...{initializationTime > 0 ? `(${initializationTime}秒)` : ''}</p>
          {initializationTime > 15 && (
            <button 
              className="btn btn-primary mt-4" 
              onClick={handleReload}
            >
              重新加载页面
            </button>
          )}
          {renderDebugInfo()}
        </div>
      ) : isLoading ? (
        <>
          <p>正在创建 API 密钥...</p>
          {renderDebugInfo()}
        </>
      ) : error ? (
        <div className="card">
          <div className="flex flex-col gap-2 p-2">
            <p className="text-xl font-bold text-red-500">出错了</p>
            <p>{error}</p>
            <button className="btn btn-primary mt-6" onClick={() => {setError(null); setCreatedApiKey(false);}}>
              重试
            </button>
            <button className="btn btn-secondary" onClick={() => logout()}>
              退出登录
            </button>
            {renderDebugInfo()}
          </div>
        </div>
      ) : user && !createdApiKey ? (
        <>
          <p>正在处理您的登录信息...</p>
          {renderDebugInfo()}
        </>
      ) : user ? (
        <div className="card">
          <div className="flex flex-col gap-2 p-2">
            <p className="text-xl font-bold">
              您已成功登录 GENSYN 测试网
            </p>
            <button className="btn btn-primary mt-6" onClick={() => logout()}>
              退出登录
            </button>
          </div>
        </div>
      ) : (
        <div className="card">
          <p className="text-xl font-bold">登录 GENSYN 测试网</p>
          <div className="flex flex-col gap-2 p-2">
            <button className="btn btn-primary mt-6" onClick={openAuthModal}>
              登录
            </button>
          </div>
        </div>
      )}
    </main>
  );
}